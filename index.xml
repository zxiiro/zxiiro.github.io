<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zxiiro</title>
    <link>https://www.zxiiro.ca/</link>
      <atom:link href="https://www.zxiiro.ca/index.xml" rel="self" type="application/rss+xml" />
    <description>zxiiro</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright © 2020 Thanh Ha</copyright>
    <image>
      <url>https://www.zxiiro.ca/img/me</url>
      <title>zxiiro</title>
      <link>https://www.zxiiro.ca/</link>
    </image>
    
    <item>
      <title>Writing a Great Commit Message</title>
      <link>https://www.zxiiro.ca/post/writing-a-great-commit-message/</link>
      <pubDate>Fri, 15 May 2020 12:27:36 -0400</pubDate>
      <guid>https://www.zxiiro.ca/post/writing-a-great-commit-message/</guid>
      <description>&lt;p&gt;An often overlooked part of Git is the commit message. The usefulness of many
of Git&amp;rsquo;s features rely on well structured commit messages.&lt;/p&gt;
&lt;p&gt;A commit message structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Subject line in 50 chars or less

Following a blank line after the subject line is the commit message
body, containing a more detailed explaination of the change.
This should be word-wrapped at 72 characters.

The body can consist of as many lines as necessary to fully
explain in detail why the change is necessary. You should
explain the problem that this commit is solving and focus on
why this change is necessary rather than explaining the &amp;quot;how&amp;quot;
(the reviewer can review the code for that detail).

Include any side effects and consequences of the change.

Many CLI based tools such as `git log`, `git shortlog`,
`git rebase`, are significantly more useful when the commit
messages follow these best practices.

Finally the last &amp;quot;block&amp;quot; (a section without further blank lines
following it) is for metadata such as sign-offs, references, and
issue numbers.

Issue: #123
See-also: #456
Ref: https://example.com/relevant-article-or-link
Co-authored-by: Firstname Lastname &amp;lt;email&amp;gt;
Signed-off-by: Firstname Lastname &amp;lt;email&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will break down the major sections below.&lt;/p&gt;
&lt;h2 id=&#34;the-subject-line&#34;&gt;The subject line&lt;/h2&gt;
&lt;p&gt;The subject line should be short and sweet, providing enough detail for the
reader to immediately have a decent idea about what the commit is about.&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;git commit&lt;/code&gt; manpage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Though not required, it’s a good idea to begin the commit message with a
single short (less than 50 character) line summarizing the change,
followed by a blank line and then a more thorough description. The text up
to the first blank line in a commit message is treated as the commit
title, and that title is used throughout Git. For example,
Git-format-patch(1) turns a commit into email, and it uses the title on
the Subject line and the rest of the commit in the body.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Best practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep the subject line short (50 characters)&lt;/li&gt;
&lt;li&gt;The first letter of the subject line should be capitalized&lt;/li&gt;
&lt;li&gt;The subject line should not end with any punctuation&lt;/li&gt;
&lt;li&gt;The subject line should be written in imperative mood&lt;/li&gt;
&lt;li&gt;Immediately following subject line is a blank line&lt;/li&gt;
&lt;li&gt;Descriptive enough that one can get the gist of the change&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Good examples:&lt;/strong&gt;&lt;/p&gt;
&lt;span style=&#34;color:green&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;Allow pyyaml &gt;= 5&lt;/li&gt;
    &lt;li&gt;Bump version to 2.0.0-SNAPSHOT&lt;/li&gt;
    &lt;li&gt;Fix double inderection of name templates&lt;/li&gt;
    &lt;li&gt;Add Private and WIP change support for Gerrit&lt;/li&gt;
  &lt;/ul&gt;
&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;Bad examples:&lt;/strong&gt;&lt;/p&gt;
&lt;span style=&#34;color:red&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;Fix build issue&lt;/li&gt;
    &lt;li&gt;Fixes delete-all command when no option is provided.&lt;/li&gt;
    &lt;li&gt;Adding view for the Delivery Pipeline Plugin&lt;/li&gt;
    &lt;li&gt;test non-default value of attach-build-log&lt;/li&gt;
  &lt;/ul&gt;
&lt;/span&gt;
&lt;h2 id=&#34;the-commit-body&#34;&gt;The commit body&lt;/h2&gt;
&lt;p&gt;Following a blank line after the subject line, the commit body is where you
can explain your change in full details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Best practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep lines under 72 characters&lt;/li&gt;
&lt;li&gt;Explain what and why instead of how&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git as well many tools that parse Git commits do not automatically wrap text
so you must manually do this yourself. Keeping the limit to 72 characters is
good practice to allow for Git to do indentation and still be under 80
characters total.&lt;/p&gt;
&lt;p&gt;Put yourself in the shoes of the reviewer of the change. If someone proposed
this change to you, what information would you like to know about it before
you will approve the change?&lt;/p&gt;
&lt;p&gt;Reviewers can look at the diff to see what exactly was changed so focus on
telling the reviewer why they should accept your change. You are essentially
writing a project proposal here so provide as much detail as possible.&lt;/p&gt;
&lt;p&gt;If you are fixing code or a test, include details on how to reproduce the
problem so that the reviewer doesn&amp;rsquo;t have to reach out to you for further
details on how to retest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good example A:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Fix the yaml load warning

In the new version of PyYAML the API changed to be more explicit. Now
the default value for the Loader is None, see:

https://github.com/yaml/pyyaml/blob/5.1/lib3/yaml/__init__.py#L103

The load is unsafe. It&#39;s better to use safe_load function.

Change-Id: Ia1cd16f2ff970ca220a266c99b6554dd4254ebd9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Good example B:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Add &#39;secret-token&#39; parameter to gitlab trigger

This adds support for the job specific secret token in the
gitlab build trigger.

This feature was added to the &amp;quot;Gitlab Plugin&amp;quot; with version 1.4.1
(released Sep 24, 2016).
Excerpt from the changelog:
 &amp;quot;Add possiblity to configure secret tokens per job to allow
 only web hooks with the correct token to trigger builds.&amp;quot;

Change-Id: Id1ede4a6a51a231f60a39bfaefbadd8f849076e4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;commit-message-trailer&#34;&gt;Commit message trailer&lt;/h2&gt;
&lt;p&gt;The final block of a commit message is for trailers. Similar to email it is
where you sign off on your message as well as include other useful metadata.
Typically for references to issues or links to pages for additional
information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Best Practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the form &lt;code&gt;Key: Value&lt;/code&gt; when entering trailers&lt;/li&gt;
&lt;li&gt;Make sure the last block has no blank lines in between entries&lt;/li&gt;
&lt;li&gt;If there is a relevant issue, refer to it here&lt;/li&gt;
&lt;li&gt;Give credit via &lt;code&gt;Co-authored-by&lt;/code&gt; to other folks who worked on this commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Issue: ABC-123
Ref: https://example.com/blog-about-issue
Change-Id: Iaa40ef0377409e08e6efd41aa967249f9d3c4xyz
Co-authored-by: Bob &amp;lt;bob@example.com&amp;gt;
Signed-off-by: Tim &amp;lt;tim@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Signed-off-by&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In some open source projects folks leave a
&lt;code&gt;Signed-off-by: Firstname Lastname &amp;lt;someone@example.com&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This can be added automatically via the &lt;code&gt;git commit -s&lt;/code&gt; command, it&amp;rsquo;s a
convenience parameter but you can also type it in by hand when writing your
commit message.&lt;/p&gt;
&lt;p&gt;Signed-off-by doesn&amp;rsquo;t really mean much in most projects but some open source
projects use it as a way of indicating that you have signed off on an
official document such as a &lt;strong&gt;Contributor License Agreement (CLA)&lt;/strong&gt; or a
&lt;strong&gt;Developer Certificate of Origin&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&#34;https://developercertificate.org/&#34;&gt;https://developercertificate.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer&#39;s Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be mindful about the sign-off rules on the projects you are contributing to
and make sure you understand what the sign-off means in case the project you
are contributing to has a document similar to this.&lt;/p&gt;
&lt;p&gt;Refer to the manpage for &lt;code&gt;git-interpret-trailers&lt;/code&gt; for more details on
trailers.&lt;/p&gt;
&lt;h2 id=&#34;final-tips-on-commit-messages&#34;&gt;Final tips on commit messages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resist the urge to use&lt;/strong&gt; &lt;code&gt;git commit -m &#39;My commit message&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;While it may seem handy, it promotes a bad habit of writing unthoughtful
commit messages. By editing your commit message in a full editor you will
spend more time thinking about your commit message, often producing higher
quality messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spend time reviewing code yourself&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you are actively participating in a project, spend some time reviewing
code on that project even if you are not a maintainer or committer on the
project. This is the best way for you to quickly learn the best practices of
not only the project but also what we discussed here as it is easier to
understand the hardships of a code reviewer if you are one yourself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contribute to Eclipse Projects via Gerrit</title>
      <link>https://www.zxiiro.ca/publication/contribute-to-eclipse-projects-via-gerrit/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 -0400</pubDate>
      <guid>https://www.zxiiro.ca/publication/contribute-to-eclipse-projects-via-gerrit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/community/eclipse_newsletter/2014/july/article3.php&#34;&gt;https://www.eclipse.org/community/eclipse_newsletter/2014/july/article3.php&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fork the Ide</title>
      <link>https://www.zxiiro.ca/talk/fork-the-ide/</link>
      <pubDate>Sat, 17 May 2014 11:57:10 -0400</pubDate>
      <guid>https://www.zxiiro.ca/talk/fork-the-ide/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.zxiiro.ca/presentations/fork-eclipse/&#34;&gt;http://www.zxiiro.ca/presentations/fork-eclipse/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WTF is Git Rebase</title>
      <link>https://www.zxiiro.ca/talk/wtf-is-git-rebase/</link>
      <pubDate>Sat, 17 May 2014 11:04:09 -0400</pubDate>
      <guid>https://www.zxiiro.ca/talk/wtf-is-git-rebase/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.zxiiro.ca/presentations/rebase&#34;&gt;https://www.zxiiro.ca/presentations/rebase&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing network performance with iperf</title>
      <link>https://www.zxiiro.ca/post/test-network-with-iperf/</link>
      <pubDate>Tue, 29 Oct 2013 00:00:00 -0400</pubDate>
      <guid>https://www.zxiiro.ca/post/test-network-with-iperf/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://code.google.com/archive/p/iperf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iperf&lt;/a&gt; is a handy tool to check
network performance between 2 computers. You can install this tool using your
distro’s package manager.&lt;/p&gt;
&lt;p&gt;There are 2 modes this tool runs in. Server and Client, you will need to run it
in server mode on one end and client mode on the other end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Server usage:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iperf -s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Client usage:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iperf -c &amp;lt;host/ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically you want to run it with the &lt;code&gt;-s&lt;/code&gt; option on the server side and the
&lt;code&gt;-c&lt;/code&gt; option on the client side. On the client end you will also need to
provider the server&amp;rsquo;s &lt;em&gt;hostname&lt;/em&gt; or &lt;em&gt;IP address&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of what it looks like when run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;------------------------------------------------------------
Client connecting to 192.168.32.50, TCP port 5001
TCP window size: 22.9 KByte (default)
------------------------------------------------------------
[  3] local 192.168.32.152 port 40885 connected with 192.168.32.50 port 5001
[ ID] Interval       Transfer     Bandwidth
[  3]  0.0-10.0 sec   897 MBytes   752 Mbits/sec
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Steam Share Library With Linux</title>
      <link>https://www.zxiiro.ca/post/steam-share-library-with-linux/</link>
      <pubDate>Sun, 27 Oct 2013 04:00:00 -0400</pubDate>
      <guid>https://www.zxiiro.ca/post/steam-share-library-with-linux/</guid>
      <description>&lt;p&gt;If you use Steam on Linux one of the annoying things I’ve found is that unlike
on Windows, Steam for Linux installs to your &lt;code&gt;$HOME&lt;/code&gt; directory. This means
every user will have their own Steam installed and what’s more their own games
installed. So on a shared system you might end up with the same games being
installed multiple times.&lt;/p&gt;
&lt;p&gt;Steam has a feature that allows you to install games to a alternate location
called Steam Libraries. This feature allows you to create a Library at a new
location such as an alternate harddrive or partition if you don’t like where
Steam installs games by default. We can use this to create a shared library
location of games. To do this create a new user group on my system called
&lt;code&gt;steam&lt;/code&gt; then add all the users on the system which use Steam to this group.&lt;/p&gt;
&lt;p&gt;Then create a shared directory on my system called &lt;code&gt;/steam-library&lt;/code&gt;, then
set the permissions to allow reading, writing and executing files from this
directory to anyone in the steam group.&lt;/p&gt;
&lt;p&gt;Next launch Steam and add &lt;code&gt;/steam-library&lt;/code&gt; as a new Library in Steam and
installed games to this location. After installing the games you can tell all
other users who use Steam on this computer to do the same. If a game they want
to install is already in the Library, it’ll just appear in their account, no
unnecessary downloading.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zxiiro.ca/img/steam-share-library.png&#34; alt=&#34;Steam Libraries&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;quick-steps&#34;&gt;Quick Steps&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;mkdir /steam-library
groupadd steam
chgrp steam /steam-library
chmod 770 /steam-library
useradd -G steam your_user
# add /steam-library to steam on all pc&#39;s and user accounts
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse CBI</title>
      <link>https://www.zxiiro.ca/publication/eclipse-cbi/</link>
      <pubDate>Thu, 01 Aug 2013 00:00:00 -0400</pubDate>
      <guid>https://www.zxiiro.ca/publication/eclipse-cbi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/community/eclipse_newsletter/2013/august/article3.php&#34;&gt;https://www.eclipse.org/community/eclipse_newsletter/2013/august/article3.php&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
