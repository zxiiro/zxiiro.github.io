<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zxiiro</title>
    <link>https://www.zxiiro.ca/</link>
      <atom:link href="https://www.zxiiro.ca/index.xml" rel="self" type="application/rss+xml" />
    <description>zxiiro</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright © 2020 Thanh Ha</copyright>
    <image>
      <url>https://www.zxiiro.ca/img/me</url>
      <title>zxiiro</title>
      <link>https://www.zxiiro.ca/</link>
    </image>
    
    <item>
      <title>Tracking Investments with You Need A Budget (YNAB)</title>
      <link>https://www.zxiiro.ca/post/ynab-tracking-investments/</link>
      <pubDate>Sat, 30 May 2020 18:08:21 -0400</pubDate>
      <guid>https://www.zxiiro.ca/post/ynab-tracking-investments/</guid>
      <description>&lt;p&gt;While &lt;em&gt;You Need A Budget (YNAB)&lt;/em&gt; isn&amp;rsquo;t really designed to track investments it
can be useful to include your investment assets to track your net worth.&lt;/p&gt;
&lt;p&gt;The way I like to do this is by creating &lt;em&gt;Tracking&lt;/em&gt; accounts for each of my
investment accounts and then reconciling the account balance once a month to
update the investment balance.&lt;/p&gt;
&lt;p&gt;To create a Tracking account:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click &lt;strong&gt;Add Account&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Unlinked&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Set account type to &lt;strong&gt;Tracking &amp;gt; Asset&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Give the account a name&lt;/li&gt;
&lt;li&gt;Set balance to current balance of total investment account&lt;/li&gt;
&lt;/ol&gt;















&lt;figure id=&#34;figure-investment-tracking&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zxiiro.ca/img/ynab-track-asset.png&#34; data-caption=&#34;Investment Tracking&#34;&gt;


  &lt;img src=&#34;https://www.zxiiro.ca/img/ynab-track-asset.png&#34; alt=&#34;&#34; width=&#34;300&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Investment Tracking
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Since the YNAB &lt;em&gt;Net Worth&lt;/em&gt; report only displays monthly balances I&amp;rsquo;ve found that
the best time to reconcile is on the last day of each month. When reconciling
simply set the balance to the current total balance of that account.&lt;/p&gt;
&lt;p&gt;If you have multiple investment accounts such as TFSA, RRSP, Non-registered,
etc&amp;hellip; then create a separate asset tracking accounts for each one of those
accounts and reconcile them at the end of each month.&lt;/p&gt;
&lt;p&gt;If you have a house asset that you&amp;rsquo;d like to track you can add it in the same
way and periodically update the market value of your house.&lt;/p&gt;
&lt;p&gt;While this method isn&amp;rsquo;t 100% accurate it gives you a good eyeball range and
makes your &lt;em&gt;Net Worth&lt;/em&gt; report a little more useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing a Great Commit Message</title>
      <link>https://www.zxiiro.ca/post/writing-a-great-commit-message/</link>
      <pubDate>Fri, 15 May 2020 12:27:36 -0400</pubDate>
      <guid>https://www.zxiiro.ca/post/writing-a-great-commit-message/</guid>
      <description>&lt;p&gt;An often overlooked part of Git is the commit message. The usefulness of many
of Git&amp;rsquo;s features rely on well structured commit messages.&lt;/p&gt;
&lt;p&gt;A commit message structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Subject line in 50 chars or less

Following a blank line after the subject line is the commit message
body, containing a more detailed explaination of the change.
This should be word-wrapped at 72 characters.

The body can consist of as many lines as necessary to fully
explain in detail why the change is necessary. You should
explain the problem that this commit is solving and focus on
why this change is necessary rather than explaining the &amp;quot;how&amp;quot;
(the reviewer can review the code for that detail).

Include any side effects and consequences of the change.

Many CLI based tools such as `git log`, `git shortlog`,
`git rebase`, are significantly more useful when the commit
messages follow these best practices.

Finally the last &amp;quot;block&amp;quot; (a section without further blank lines
following it) is for metadata such as sign-offs, references, and
issue numbers.

Issue: #123
See-also: #456
Ref: https://example.com/relevant-article-or-link
Co-authored-by: Firstname Lastname &amp;lt;email&amp;gt;
Signed-off-by: Firstname Lastname &amp;lt;email&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will break down the major sections below.&lt;/p&gt;
&lt;h2 id=&#34;the-subject-line&#34;&gt;The subject line&lt;/h2&gt;
&lt;p&gt;The subject line should be short and sweet, providing enough detail for the
reader to immediately have a decent idea about what the commit is about.&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;git commit&lt;/code&gt; manpage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Though not required, it’s a good idea to begin the commit message with a
single short (less than 50 character) line summarizing the change,
followed by a blank line and then a more thorough description. The text up
to the first blank line in a commit message is treated as the commit
title, and that title is used throughout Git. For example,
Git-format-patch(1) turns a commit into email, and it uses the title on
the Subject line and the rest of the commit in the body.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Best practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep the subject line short (50 characters)&lt;/li&gt;
&lt;li&gt;The first letter of the subject line should be capitalized&lt;/li&gt;
&lt;li&gt;The subject line should not end with any punctuation&lt;/li&gt;
&lt;li&gt;The subject line should be written in imperative mood&lt;/li&gt;
&lt;li&gt;Immediately following subject line is a blank line&lt;/li&gt;
&lt;li&gt;Descriptive enough that one can get the gist of the change&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Good examples:&lt;/strong&gt;&lt;/p&gt;
&lt;span style=&#34;color:green&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;Allow pyyaml &gt;= 5&lt;/li&gt;
    &lt;li&gt;Bump version to 2.0.0-SNAPSHOT&lt;/li&gt;
    &lt;li&gt;Fix double inderection of name templates&lt;/li&gt;
    &lt;li&gt;Add Private and WIP change support for Gerrit&lt;/li&gt;
  &lt;/ul&gt;
&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;Bad examples:&lt;/strong&gt;&lt;/p&gt;
&lt;span style=&#34;color:red&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;Fix build issue&lt;/li&gt;
    &lt;li&gt;Fixes delete-all command when no option is provided.&lt;/li&gt;
    &lt;li&gt;Adding view for the Delivery Pipeline Plugin&lt;/li&gt;
    &lt;li&gt;test non-default value of attach-build-log&lt;/li&gt;
  &lt;/ul&gt;
&lt;/span&gt;
&lt;h2 id=&#34;the-commit-body&#34;&gt;The commit body&lt;/h2&gt;
&lt;p&gt;Following a blank line after the subject line, the commit body is where you
can explain your change in full details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Best practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep lines under 72 characters&lt;/li&gt;
&lt;li&gt;Explain what and why instead of how&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git as well many tools that parse Git commits do not automatically wrap text
so you must manually do this yourself. Keeping the limit to 72 characters is
good practice to allow for Git to do indentation and still be under 80
characters total.&lt;/p&gt;
&lt;p&gt;Put yourself in the shoes of the reviewer of the change. If someone proposed
this change to you, what information would you like to know about it before
you will approve the change?&lt;/p&gt;
&lt;p&gt;Reviewers can look at the diff to see what exactly was changed so focus on
telling the reviewer why they should accept your change. You are essentially
writing a project proposal here so provide as much detail as possible.&lt;/p&gt;
&lt;p&gt;If you are fixing code or a test, include details on how to reproduce the
problem so that the reviewer doesn&amp;rsquo;t have to reach out to you for further
details on how to retest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good example A:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Fix the yaml load warning

In the new version of PyYAML the API changed to be more explicit. Now
the default value for the Loader is None, see:

https://github.com/yaml/pyyaml/blob/5.1/lib3/yaml/__init__.py#L103

The load is unsafe. It&#39;s better to use safe_load function.

Change-Id: Ia1cd16f2ff970ca220a266c99b6554dd4254ebd9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Good example B:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Add &#39;secret-token&#39; parameter to gitlab trigger

This adds support for the job specific secret token in the
gitlab build trigger.

This feature was added to the &amp;quot;Gitlab Plugin&amp;quot; with version 1.4.1
(released Sep 24, 2016).
Excerpt from the changelog:
 &amp;quot;Add possiblity to configure secret tokens per job to allow
 only web hooks with the correct token to trigger builds.&amp;quot;

Change-Id: Id1ede4a6a51a231f60a39bfaefbadd8f849076e4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;commit-message-trailer&#34;&gt;Commit message trailer&lt;/h2&gt;
&lt;p&gt;The final block of a commit message is for trailers. Similar to email it is
where you sign off on your message as well as include other useful metadata.
Typically for references to issues or links to pages for additional
information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Best Practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the form &lt;code&gt;Key: Value&lt;/code&gt; when entering trailers&lt;/li&gt;
&lt;li&gt;Make sure the last block has no blank lines in between entries&lt;/li&gt;
&lt;li&gt;If there is a relevant issue, refer to it here&lt;/li&gt;
&lt;li&gt;Give credit via &lt;code&gt;Co-authored-by&lt;/code&gt; to other folks who worked on this commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Issue: ABC-123
Ref: https://example.com/blog-about-issue
Change-Id: Iaa40ef0377409e08e6efd41aa967249f9d3c4xyz
Co-authored-by: Bob &amp;lt;bob@example.com&amp;gt;
Signed-off-by: Tim &amp;lt;tim@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Signed-off-by&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In some open source projects folks leave a
&lt;code&gt;Signed-off-by: Firstname Lastname &amp;lt;someone@example.com&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This can be added automatically via the &lt;code&gt;git commit -s&lt;/code&gt; command, it&amp;rsquo;s a
convenience parameter but you can also type it in by hand when writing your
commit message.&lt;/p&gt;
&lt;p&gt;Signed-off-by doesn&amp;rsquo;t really mean much in most projects but some open source
projects use it as a way of indicating that you have signed off on an
official document such as a &lt;strong&gt;Contributor License Agreement (CLA)&lt;/strong&gt; or a
&lt;strong&gt;Developer Certificate of Origin&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&#34;https://developercertificate.org/&#34;&gt;https://developercertificate.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer&#39;s Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be mindful about the sign-off rules on the projects you are contributing to
and make sure you understand what the sign-off means in case the project you
are contributing to has a document similar to this.&lt;/p&gt;
&lt;p&gt;Refer to the manpage for &lt;code&gt;git-interpret-trailers&lt;/code&gt; for more details on
trailers.&lt;/p&gt;
&lt;h2 id=&#34;final-tips-on-commit-messages&#34;&gt;Final tips on commit messages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resist the urge to use&lt;/strong&gt; &lt;code&gt;git commit -m &#39;My commit message&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;While it may seem handy, it promotes a bad habit of writing unthoughtful
commit messages. By editing your commit message in a full editor you will
spend more time thinking about your commit message, often producing higher
quality messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spend time reviewing code yourself&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you are actively participating in a project, spend some time reviewing
code on that project even if you are not a maintainer or committer on the
project. This is the best way for you to quickly learn the best practices of
not only the project but also what we discussed here as it is easier to
understand the hardships of a code reviewer if you are one yourself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contributing to Eclipse Projects via Gerrit</title>
      <link>https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/</link>
      <pubDate>Mon, 24 Aug 2015 04:03:57 -0400</pubDate>
      <guid>https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/</guid>
      <description>&lt;p&gt;Gerrit is a Web based code review system that is available to projects at
Eclipse. The service is located at &lt;a href=&#34;https://git.eclipse.org/r/&#34;&gt;https://git.eclipse.org/r/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;creating-and-configuring-your-gerrit-account&#34;&gt;Creating and configuring your Gerrit account&lt;/h2&gt;
&lt;p&gt;Eclipse&amp;rsquo;s Gerrit instance does not know your account exists until you login for
the first time. So if you haven&amp;rsquo;t done so already navigate to
&lt;a href=&#34;https://git.eclipse.org/r/&#34;&gt;https://git.eclipse.org/r/&lt;/a&gt; and login using your eclipse.org credentials to
initialize your Gerrit account.&lt;/p&gt;
&lt;p&gt;To checkout repositories, Gerrit does not let you use the same password as
your eclipse.org account password. Instead if you are using SSH authentication
Gerrit requires you provide it with your SSH public key. If you are using HTTP
authentication then Gerrit will generate a random password for you.&lt;/p&gt;
&lt;h3 id=&#34;accessing-gerrit-repos-with-ssh&#34;&gt;Accessing Gerrit repos with SSH&lt;/h3&gt;
&lt;p&gt;SSH key based authentication is a bit more secure and easier as you do not need
to save your password on your system. GitHub has a pretty decent documentation
on how to Generate SSH key pair if you are interested in trying this method
&lt;a href=&#34;https://help.github.com/articles/generating-ssh-keys&#34;&gt;https://help.github.com/articles/generating-ssh-keys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you have hour SSH keys prepared you can upload the public key:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Login to Gerrit&lt;/li&gt;
&lt;li&gt;Click your name at the top right&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Settings &amp;gt; SSH Public Keys&lt;/strong&gt; (&lt;a href=&#34;https://git.eclipse.org/r/#/settings/ssh-keys&#34;&gt;https://git.eclipse.org/r/#/settings/ssh-keys&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Add Key &amp;hellip;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Paste the text of your public key into the text box&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Add&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your key may look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEELNeLbxkyFI3JfIC7sutF2NLJwizVDDljw6h2KB9dwUrVGUBQM7r9+4Ndp/ojJ+lEk8OuNh+Kicc0hwHLHz+v81ejN62yQe+c16fvard6MdkrA3xr1WuvNZDvBQhVUkNmEoYYa3C+GpvEmQssvrPhpU0RD6AELzBnrG+VME9Vb2ObvIHKj8OulxD96zk2GTRHM0KaR9XhLPsLQ7U0ML715BDA3k1Zf66DOmZiyzckZZD+YtiV3qnAfwW5hU9Xi+M92vqf5Z5mC7t6aX9Pu5TXb614NE1GKUZ6yDEWFLspo4ihl+X2pA2oMONjbgOG5gqlnBAArsG0WP6dVF+jKQ5 your_email@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The last part where it says &lt;code&gt;your_email@example.com&lt;/code&gt; is actually just a comment
and can be anything you want here. Typically I put my email address or some
word to identify who’s key this is or where it came from in case you have
multiple keys.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;generate-http-password&#34;&gt;Generate HTTP password&lt;/h3&gt;
&lt;p&gt;If using SSH key based authentication is not possible for you, or you would
rather use a password. You will need to tell Gerrit to generate a random
password for you before you can use password authentication.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Login to Gerrit&lt;/li&gt;
&lt;li&gt;Click your name at the top right&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Settings &amp;gt; HTTP Password&lt;/strong&gt; (&lt;a href=&#34;https://git.eclipse.org/r/#/settings/http-password&#34;&gt;https://git.eclipse.org/r/#/settings/http-password&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Generate&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;





  
  











&lt;figure id=&#34;figure-generate-http-password&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-http-password_huab8a831c2f12fb7e99865d611413b6b1_10985_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Generate HTTP Password&#34;&gt;


  &lt;img data-src=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-http-password_huab8a831c2f12fb7e99865d611413b6b1_10985_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;249&#34; height=&#34;203&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Generate HTTP Password
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;This random password will be the password you use to work with Git via Gerrit
URLs. If you are ever worried that your password is compromised simply clear
your password and re-generate a new one.&lt;/p&gt;
&lt;h2 id=&#34;understanding-eclipse-git-and-gerrit-urls&#34;&gt;Understanding Eclipse Git and Gerrit URLs&lt;/h2&gt;
&lt;p&gt;At Eclipse there is 3 types of URLs supported &lt;code&gt;git://&lt;/code&gt;, &lt;code&gt;ssh://&lt;/code&gt;, and
&lt;code&gt;https://&lt;/code&gt;. You can find the project Git URLs via cGit at
&lt;a href=&#34;https://git.eclipse.org/c/&#34;&gt;https://git.eclipse.org/c/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For Git the URLs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git://git.eclipse.org/gitroot/project/repo.git&lt;/li&gt;
&lt;li&gt;ssh://git.eclipse.org/gitroot/project/repo.git&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://git.eclipse.org/gitroot/project/repo.git&#34;&gt;http://git.eclipse.org/gitroot/project/repo.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the Gerrit URLs via Gerrit at &lt;a href=&#34;https://git.eclipse.org/r/&#34;&gt;https://git.eclipse.org/r/&lt;/a&gt; and
should look something like these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git://git.eclipse.org/gitroot/project/repo&lt;/li&gt;
&lt;li&gt;ssh://git.eclipse.org:29418/project/repo&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.eclipse.org/r/project/repo&#34;&gt;https://git.eclipse.org/r/project/repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git-url&#34;&gt;git:// url&lt;/h3&gt;
&lt;p&gt;This URL is a read-only URL via the &lt;code&gt;git://&lt;/code&gt; protocol. This URL is in the form
&lt;code&gt;git://git.eclipse.org/gitroot/project/repo.git&lt;/code&gt; and is the same no matter if
you copied it from cGit or Gerrit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;project&lt;/strong&gt; is a directory containing all the repos for a specific project.
For example the CBI project is under /gitroot/cbi/repo.git&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;repo.git&lt;/strong&gt; is the specific git repository for a project, some projects may
have more than 1 repo&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The final “.git” part of the URL is optional so may be omitted.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ssh-url&#34;&gt;ssh:// url&lt;/h3&gt;
&lt;p&gt;The ssh:// protocol URLs are slightly different depending on if you are pulling
from Git or Gerrit. If your project is Gerrit enabled you should prefer the
Gerrit URL otherwise you won’t be able to push to the repository.&lt;/p&gt;
&lt;p&gt;The reason the URLs are different is because Gerrit provides it’s own SSH
service on port 29418 and does not use the same SSH service that is on the
default port on git.eclipse.org.&lt;/p&gt;
&lt;p&gt;Gerrit trims the “/gitroot” portion of the URL and adds a port “:29418” in it’s
place.&lt;/p&gt;
&lt;h3 id=&#34;http-url&#34;&gt;http:// url&lt;/h3&gt;
&lt;p&gt;Again the URLs are slightly different depending on if you are using Git or
Gerrit. If your project is Gerrit enabled you should prefer the Gerrit URL
otherwise you won’t be able to push to the repository.&lt;/p&gt;
&lt;p&gt;The reason the URL pattern is different here is because Gerrit hosts it’s own
HTTP service for Git. The difference here is Gerrit only supports https
(secure) and again Gerrit trims the “/gitroot” part of the URL and replaces it
with “/r” which is the Gerrit web URL.&lt;/p&gt;
&lt;h2 id=&#34;updating-a-existing-git-repo-to-use-gerrit-url&#34;&gt;Updating a existing Git repo to use Gerrit URL&lt;/h2&gt;
&lt;p&gt;If you have already cloned a Git project at Eclipse you do not need to reclone,
simply update your Git URLs to point to the new Gerrit URLs and you can start
using Gerrit.&lt;/p&gt;
&lt;h3 id=&#34;using-git-cli&#34;&gt;Using Git CLI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git remote set-url origin &amp;lt;gerrit-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-egit&#34;&gt;Using EGit&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the Git perspective (Window &amp;gt; Open Perspective &amp;gt; Other &amp;gt; Git)&lt;/li&gt;
&lt;li&gt;Right click on the repo you wish to modify&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Properties&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Under Configuration tab, look for remote &amp;gt; origin &amp;gt; url&lt;/li&gt;
&lt;li&gt;Enter the new URL&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Apply&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Ok&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;





  
  











&lt;figure id=&#34;figure-egit-remote-url&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-egit-url_hu839838ffc56ab6b2a90c07abea441807_7261_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;EGit Remote URL&#34;&gt;


  &lt;img data-src=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-egit-url_hu839838ffc56ab6b2a90c07abea441807_7261_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;559&#34; height=&#34;88&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    EGit Remote URL
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;checkout-a-gerrit-project&#34;&gt;Checkout a Gerrit Project&lt;/h2&gt;
&lt;p&gt;If you have not already checked out the repository you want to work on then you
can clone the repo directly.&lt;/p&gt;
&lt;h3 id=&#34;using-git-cli-1&#34;&gt;Using Git CLI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;gerrit-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-egit-1&#34;&gt;Using EGit&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the Git perspective (Window &amp;gt; Open Perspective &amp;gt; Other &amp;gt; Git)&lt;/li&gt;
&lt;li&gt;Click the Clone Repository button in the Git Repository view&lt;/li&gt;
&lt;li&gt;Enter the Gerrit URL into the URI link&lt;/li&gt;
&lt;li&gt;Enter your credentials if applicable (If you are using SSH you’ll have to configure your public/private keys)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;push-to-gerrit&#34;&gt;Push to Gerrit&lt;/h2&gt;
&lt;p&gt;Pushing to Gerrit is no different than pushing to a regular Git repo. The only
difference is you are pointing to a new URL so make sure your URL is configured
currently. Simply push as you would with any other repository and your changes
will go directly into the repo.&lt;/p&gt;
&lt;p&gt;I like to be as specific as possible so I always push a branch specifically.&lt;/p&gt;
&lt;h3 id=&#34;using-git-cli-2&#34;&gt;Using Git CLI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change master to the name of the branch you want to push to.&lt;/p&gt;
&lt;h3 id=&#34;using-egit-2&#34;&gt;Using EGit&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the Git perspective (Window &amp;gt; Open Perspective &amp;gt; Other &amp;gt; Git)&lt;/li&gt;
&lt;li&gt;Right click on the repo you are making changes to&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Push branch&amp;hellip;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ensure branch is master (or whatever branch you’re pushing)&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Next&lt;/strong&gt; (Note this will immediately push your branch!)&lt;/li&gt;
&lt;/ol&gt;





  
  











&lt;figure id=&#34;figure-egit-push&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-egit-push_hu22769935e82b6f2ef7e8492896880bff_21273_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;EGit Push&#34;&gt;


  &lt;img data-src=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-egit-push_hu22769935e82b6f2ef7e8492896880bff_21273_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;696&#34; height=&#34;351&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    EGit Push
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;push-to-gerrit-for-review&#34;&gt;Push to Gerrit for Review&lt;/h2&gt;
&lt;p&gt;Pushing for Review is a feature of Gerrit which allows you to push a patch
online for developers to review. This is the method you should use to push if
you are not a committer on the project or if you’d like a second opinion on
your patch before it goes live.&lt;/p&gt;
&lt;p&gt;Gerrit provides a special refspec to push your changes to which will instead of
merging into the upstream repository commits it to be reviewed. This refspec is
&lt;code&gt;refs/for/*&lt;/code&gt; if where the * tells Gerrit which branch you want your patch to be
reviewed against. For example if you’d like to push your patch to be reviewed
against the &lt;code&gt;master&lt;/code&gt; branch then you push to &lt;code&gt;refs/for/master&lt;/code&gt;. Change master to
be any other existing branch online for it to be reviewed against another
branch.&lt;/p&gt;
&lt;p&gt;In the example below we are pushing a special Git keyword called &lt;code&gt;HEAD&lt;/code&gt;. In this
case this simply means the latest commit on the current branch you are on.&lt;/p&gt;
&lt;h3 id=&#34;using-git-cli-3&#34;&gt;Using Git CLI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git push origin HEAD:refs/for/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change master to whichever branch you want to push to.&lt;/p&gt;
&lt;h3 id=&#34;using-egit-3&#34;&gt;Using EGit&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the Git perspective (Window &amp;gt; Open Perspective &amp;gt; Other &amp;gt; Git)&lt;/li&gt;
&lt;li&gt;Right click on the repo you are making changes to&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Remote &amp;gt; Push&amp;hellip;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Configure Remote Repository&lt;/strong&gt; and choose &lt;code&gt;origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Next&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;strong&gt;Source ref&lt;/strong&gt; to &lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;strong&gt;Destination ref&lt;/strong&gt; to &lt;code&gt;refs/for/master&lt;/code&gt; (Change master to the branch you want the patch to be reviewed against)&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Add Spec&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Finish&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;





  
  











&lt;figure id=&#34;figure-egit-refspec&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-egit-refspec_hu6f78e05a67c1fbe1d54407163cd6f97c_6732_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;EGit Refspec&#34;&gt;


  &lt;img data-src=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-egit-refspec_hu6f78e05a67c1fbe1d54407163cd6f97c_6732_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;585&#34; height=&#34;72&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    EGit Refspec
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    After you push, Gerrit will provide you with a link to your review. Note this
down as it will be the link to your patch should you need it. If you are
working on a Bug it is good practice to link to this URL in the Bug. The URL
should look similar to this &lt;a href=&#34;https://git.eclipse.org/r/24873/&#34;&gt;https://git.eclipse.org/r/24873/&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;updating-a-patch-for-review&#34;&gt;Updating a patch for Review&lt;/h2&gt;
&lt;p&gt;When your code is reviewed you might have some feedback asking you to address
some issues with your code. In this case you will need to update your patch
with a new version that addresses feedback comments.&lt;/p&gt;
&lt;p&gt;The Gerrit way to update patches is to amend your existing patch commit
continuously until it is accepted. When you amend your patch though you need to
ensure that your commit message contains the correct &lt;code&gt;Change-Id&lt;/code&gt; field. This
field is how Gerrit knows that you are updating an existing Gerrit review. This
is a unique string that helps Gerrit identify an existing Review and update it.
You can find the &lt;code&gt;Change-Id&lt;/code&gt; on the review page for your patch near the top you
should see a box similar to this:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-gerrit-change-id&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-change-id_hu1f92e0cb414e591469984358cb7f7ea4_15256_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Gerrit Change-Id&#34;&gt;


  &lt;img data-src=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-change-id_hu1f92e0cb414e591469984358cb7f7ea4_15256_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;314&#34; height=&#34;169&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Gerrit Change-Id
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;using-git-cli-4&#34;&gt;Using Git CLI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git add &amp;lt;files&amp;gt;
git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-egit-4&#34;&gt;Using EGit&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the Git perspective (Window &amp;gt; Open Perspective &amp;gt; Other &amp;gt; Git)&lt;/li&gt;
&lt;li&gt;Right click on the repo you are making changes to&lt;/li&gt;
&lt;li&gt;Click Commit…&lt;/li&gt;
&lt;li&gt;Select the files you modified&lt;/li&gt;
&lt;li&gt;Check the Amend Previous Commit button&lt;/li&gt;
&lt;/ol&gt;





  
  











&lt;figure id=&#34;figure-egit-amend&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-egit-amend_hu9324df1d621f954b6ee67b5972860cba_3404_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;EGit Amend&#34;&gt;


  &lt;img data-src=&#34;https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/gerrit-egit-amend_hu9324df1d621f954b6ee67b5972860cba_3404_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;620&#34; height=&#34;35&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    EGit Amend
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;amended-commit-message&#34;&gt;Amended Commit message&lt;/h3&gt;
&lt;p&gt;Your amended commit message should look similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Bug 420891 - [CBI] Builds too many projects

According discussions in Bug 420891 it seems CBI build is building too
many projects in JSDT. This patch removes the development directory from
the build list which does not need to be built.

Change-Id: I5bc9dfe47569e854b40d4fe9a400bb1dd16781d6
Signed-off-by: Thanh Ha &amp;lt;thanh.ha@eclipse.org&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once amended you can push using the same method as in the previous section
&lt;strong&gt;Push to Gerrit for Review&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contribute to Eclipse Projects via Gerrit</title>
      <link>https://www.zxiiro.ca/publication/contribute-to-eclipse-projects-via-gerrit/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 -0400</pubDate>
      <guid>https://www.zxiiro.ca/publication/contribute-to-eclipse-projects-via-gerrit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/community/eclipse_newsletter/2014/july/article3.php&#34;&gt;https://www.eclipse.org/community/eclipse_newsletter/2014/july/article3.php&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fork the Ide</title>
      <link>https://www.zxiiro.ca/talk/fork-the-ide/</link>
      <pubDate>Sat, 17 May 2014 11:57:10 -0400</pubDate>
      <guid>https://www.zxiiro.ca/talk/fork-the-ide/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.zxiiro.ca/presentations/fork-eclipse/&#34;&gt;https://www.zxiiro.ca/presentations/fork-eclipse/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WTF is Git Rebase</title>
      <link>https://www.zxiiro.ca/talk/wtf-is-git-rebase/</link>
      <pubDate>Sat, 17 May 2014 11:04:09 -0400</pubDate>
      <guid>https://www.zxiiro.ca/talk/wtf-is-git-rebase/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.zxiiro.ca/presentations/rebase&#34;&gt;https://www.zxiiro.ca/presentations/rebase&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing network performance with iperf</title>
      <link>https://www.zxiiro.ca/post/test-network-with-iperf/</link>
      <pubDate>Tue, 29 Oct 2013 00:00:00 -0400</pubDate>
      <guid>https://www.zxiiro.ca/post/test-network-with-iperf/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://code.google.com/archive/p/iperf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iperf&lt;/a&gt; is a handy tool to check
network performance between 2 computers. You can install this tool using your
distro’s package manager.&lt;/p&gt;
&lt;p&gt;There are 2 modes this tool runs in. Server and Client, you will need to run it
in server mode on one end and client mode on the other end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Server usage:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iperf -s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Client usage:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iperf -c &amp;lt;host/ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically you want to run it with the &lt;code&gt;-s&lt;/code&gt; option on the server side and the
&lt;code&gt;-c&lt;/code&gt; option on the client side. On the client end you will also need to
provider the server&amp;rsquo;s &lt;em&gt;hostname&lt;/em&gt; or &lt;em&gt;IP address&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of what it looks like when run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;------------------------------------------------------------
Client connecting to 192.168.32.50, TCP port 5001
TCP window size: 22.9 KByte (default)
------------------------------------------------------------
[  3] local 192.168.32.152 port 40885 connected with 192.168.32.50 port 5001
[ ID] Interval       Transfer     Bandwidth
[  3]  0.0-10.0 sec   897 MBytes   752 Mbits/sec
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Steam Share Library With Linux</title>
      <link>https://www.zxiiro.ca/post/steam-share-library-with-linux/</link>
      <pubDate>Sun, 27 Oct 2013 04:00:00 -0400</pubDate>
      <guid>https://www.zxiiro.ca/post/steam-share-library-with-linux/</guid>
      <description>&lt;p&gt;If you use Steam on Linux one of the annoying things I’ve found is that unlike
on Windows, Steam for Linux installs to your &lt;code&gt;$HOME&lt;/code&gt; directory. This means
every user will have their own Steam installed and what’s more their own games
installed. So on a shared system you might end up with the same games being
installed multiple times.&lt;/p&gt;
&lt;p&gt;Steam has a feature that allows you to install games to a alternate location
called Steam Libraries. This feature allows you to create a Library at a new
location such as an alternate harddrive or partition if you don’t like where
Steam installs games by default. We can use this to create a shared library
location of games. To do this create a new user group on my system called
&lt;code&gt;steam&lt;/code&gt; then add all the users on the system which use Steam to this group.&lt;/p&gt;
&lt;p&gt;Then create a shared directory on my system called &lt;code&gt;/steam-library&lt;/code&gt;, then
set the permissions to allow reading, writing and executing files from this
directory to anyone in the steam group.&lt;/p&gt;
&lt;p&gt;Next launch Steam and add &lt;code&gt;/steam-library&lt;/code&gt; as a new Library in Steam and
installed games to this location. After installing the games you can tell all
other users who use Steam on this computer to do the same. If a game they want
to install is already in the Library, it’ll just appear in their account, no
unnecessary downloading.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zxiiro.ca/img/steam-share-library.png&#34; alt=&#34;Steam Libraries&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;quick-steps&#34;&gt;Quick Steps&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;mkdir /steam-library
groupadd steam
chgrp steam /steam-library
chmod 770 /steam-library
useradd -G steam your_user
# add /steam-library to steam on all pc&#39;s and user accounts
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse CBI</title>
      <link>https://www.zxiiro.ca/publication/eclipse-cbi/</link>
      <pubDate>Thu, 01 Aug 2013 00:00:00 -0400</pubDate>
      <guid>https://www.zxiiro.ca/publication/eclipse-cbi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/community/eclipse_newsletter/2013/august/article3.php&#34;&gt;https://www.eclipse.org/community/eclipse_newsletter/2013/august/article3.php&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
