[{"authors":[null],"categories":[],"content":"While You Need A Budget (YNAB) isn\u0026rsquo;t really designed to track investments it can be useful to include your investment assets to track your net worth.\nThe way I like to do this is by creating Tracking accounts for each of my investment accounts and then reconciling the account balance once a month to update the investment balance.\nTo create a Tracking account:\n Click Add Account Choose Unlinked Set account type to Tracking \u0026gt; Asset Give the account a name Set balance to current balance of total investment account    Investment Tracking   Since the YNAB Net Worth report only displays monthly balances I\u0026rsquo;ve found that the best time to reconcile is on the last day of each month. When reconciling simply set the balance to the current total balance of that account.\nIf you have multiple investment accounts such as TFSA, RRSP, Non-registered, etc\u0026hellip; then create a separate asset tracking accounts for each one of those accounts and reconcile them at the end of each month.\nIf you have a house asset that you\u0026rsquo;d like to track you can add it in the same way and periodically update the market value of your house.\nWhile this method isn\u0026rsquo;t 100% accurate it gives you a good eyeball range and makes your Net Worth report a little more useful.\n","date":1590876501,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590878225,"objectID":"1da6fd3a7bbf5940e47fd04e68636e15","permalink":"https://www.zxiiro.ca/post/ynab-tracking-investments/","publishdate":"2020-05-30T18:08:21-04:00","relpermalink":"/post/ynab-tracking-investments/","section":"post","summary":"While You Need A Budget (YNAB) isn\u0026rsquo;t really designed to track investments it can be useful to include your investment assets to track your net worth.\nThe way I like to do this is by creating Tracking accounts for each of my investment accounts and then reconciling the account balance once a month to update the investment balance.","tags":["ynab"],"title":"Tracking Investments with You Need A Budget (YNAB)","type":"post"},{"authors":[null],"categories":[],"content":"An often overlooked part of Git is the commit message. The usefulness of many of Git\u0026rsquo;s features rely on well structured commit messages.\nA commit message structure:\nSubject line in 50 chars or less Following a blank line after the subject line is the commit message body, containing a more detailed explaination of the change. This should be word-wrapped at 72 characters. The body can consist of as many lines as necessary to fully explain in detail why the change is necessary. You should explain the problem that this commit is solving and focus on why this change is necessary rather than explaining the \u0026quot;how\u0026quot; (the reviewer can review the code for that detail). Include any side effects and consequences of the change. Many CLI based tools such as `git log`, `git shortlog`, `git rebase`, are significantly more useful when the commit messages follow these best practices. Finally the last \u0026quot;block\u0026quot; (a section without further blank lines following it) is for metadata such as sign-offs, references, and issue numbers. Issue: #123 See-also: #456 Ref: https://example.com/relevant-article-or-link Co-authored-by: Firstname Lastname \u0026lt;email\u0026gt; Signed-off-by: Firstname Lastname \u0026lt;email\u0026gt;  We will break down the major sections below.\nThe subject line The subject line should be short and sweet, providing enough detail for the reader to immediately have a decent idea about what the commit is about.\nFrom the git commit manpage:\nThough not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, Git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.  Best practices:\n Keep the subject line short (50 characters) The first letter of the subject line should be capitalized The subject line should not end with any punctuation The subject line should be written in imperative mood Immediately following subject line is a blank line Descriptive enough that one can get the gist of the change  Good examples:\n Allow pyyaml = 5 Bump version to 2.0.0-SNAPSHOT Fix double inderection of name templates Add Private and WIP change support for Gerrit   Bad examples:\n Fix build issue Fixes delete-all command when no option is provided. Adding view for the Delivery Pipeline Plugin test non-default value of attach-build-log   The commit body Following a blank line after the subject line, the commit body is where you can explain your change in full details.\nBest practices:\n Keep lines under 72 characters Explain what and why instead of how  Git as well many tools that parse Git commits do not automatically wrap text so you must manually do this yourself. Keeping the limit to 72 characters is good practice to allow for Git to do indentation and still be under 80 characters total.\nPut yourself in the shoes of the reviewer of the change. If someone proposed this change to you, what information would you like to know about it before you will approve the change?\nReviewers can look at the diff to see what exactly was changed so focus on telling the reviewer why they should accept your change. You are essentially writing a project proposal here so provide as much detail as possible.\nIf you are fixing code or a test, include details on how to reproduce the problem so that the reviewer doesn\u0026rsquo;t have to reach out to you for further details on how to retest.\nGood example A:\nFix the yaml load warning In the new version of PyYAML the API changed to be more explicit. Now the default value for the Loader is None, see: https://github.com/yaml/pyyaml/blob/5.1/lib3/yaml/__init__.py#L103 The load is unsafe. It's better to use safe_load function. Change-Id: Ia1cd16f2ff970ca220a266c99b6554dd4254ebd9  Good example B:\nAdd 'secret-token' parameter to gitlab trigger This adds support for the job specific secret token in the gitlab build trigger. This feature was added to the \u0026quot;Gitlab Plugin\u0026quot; with version 1.4.1 (released Sep 24, 2016). Excerpt from the changelog: \u0026quot;Add possiblity to configure secret tokens per job to allow only web hooks with the correct token to trigger builds.\u0026quot; Change-Id: Id1ede4a6a51a231f60a39bfaefbadd8f849076e4  Commit message trailer The final block of a commit message is for trailers. Similar to email it is where you sign off on your message as well as include other useful metadata. Typically for references to issues or links to pages for additional information.\nBest Practices:\n Use the form Key: Value when entering trailers Make sure the last block has no blank lines in between entries If there is a relevant issue, refer to it here Give credit via Co-authored-by to other folks who worked on this commit  Example:\nIssue: ABC-123 Ref: https://example.com/blog-about-issue Change-Id: Iaa40ef0377409e08e6efd41aa967249f9d3c4xyz Co-authored-by: Bob \u0026lt;bob@example.com\u0026gt; Signed-off-by: Tim \u0026lt;tim@example.com\u0026gt;  Signed-off-by\nIn some open source projects folks leave a Signed-off-by: Firstname Lastname \u0026lt;someone@example.com\u0026gt;.\nThis can be added automatically via the git commit -s command, it\u0026rsquo;s a convenience parameter but you can also type it in by hand when writing your commit message.\nSigned-off-by doesn\u0026rsquo;t really mean much in most projects but some open source projects use it as a way of indicating that you have signed off on an official document such as a Contributor License Agreement (CLA) or a Developer Certificate of Origin.\nReference: https://developercertificate.org/\nDeveloper Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 1 Letterman Drive Suite D4700 San Francisco, CA, 94129 Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.  Be mindful about the sign-off rules on the projects you are contributing to and make sure you understand what the sign-off means in case the project you are contributing to has a document similar to this.\nRefer to the manpage for git-interpret-trailers for more details on trailers.\nFinal tips on commit messages   Resist the urge to use git commit -m 'My commit message'\nWhile it may seem handy, it promotes a bad habit of writing unthoughtful commit messages. By editing your commit message in a full editor you will spend more time thinking about your commit message, often producing higher quality messages.\n  Spend time reviewing code yourself\nIf you are actively participating in a project, spend some time reviewing code on that project even if you are not a maintainer or committer on the project. This is the best way for you to quickly learn the best practices of not only the project but also what we discussed here as it is easier to understand the hardships of a code reviewer if you are one yourself.\n  ","date":1589560056,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589763249,"objectID":"1bd739218f42c7686cb8949a9409872f","permalink":"https://www.zxiiro.ca/post/writing-a-great-commit-message/","publishdate":"2020-05-15T12:27:36-04:00","relpermalink":"/post/writing-a-great-commit-message/","section":"post","summary":"An often overlooked part of Git is the commit message. The usefulness of many of Git\u0026rsquo;s features rely on well structured commit messages.\nA commit message structure:\nSubject line in 50 chars or less Following a blank line after the subject line is the commit message body, containing a more detailed explaination of the change.","tags":["Git"],"title":"Writing a Great Commit Message","type":"post"},{"authors":[null],"categories":[],"content":"Gerrit is a Web based code review system that is available to projects at Eclipse. The service is located at https://git.eclipse.org/r/\nCreating and configuring your Gerrit account Eclipse\u0026rsquo;s Gerrit instance does not know your account exists until you login for the first time. So if you haven\u0026rsquo;t done so already navigate to https://git.eclipse.org/r/ and login using your eclipse.org credentials to initialize your Gerrit account.\nTo checkout repositories, Gerrit does not let you use the same password as your eclipse.org account password. Instead if you are using SSH authentication Gerrit requires you provide it with your SSH public key. If you are using HTTP authentication then Gerrit will generate a random password for you.\nAccessing Gerrit repos with SSH SSH key based authentication is a bit more secure and easier as you do not need to save your password on your system. GitHub has a pretty decent documentation on how to Generate SSH key pair if you are interested in trying this method https://help.github.com/articles/generating-ssh-keys\nOnce you have hour SSH keys prepared you can upload the public key:\n Login to Gerrit Click your name at the top right Click Settings \u0026gt; SSH Public Keys (https://git.eclipse.org/r/#/settings/ssh-keys) Click Add Key \u0026hellip; Paste the text of your public key into the text box Click Add  Your key may look something like this:\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEELNeLbxkyFI3JfIC7sutF2NLJwizVDDljw6h2KB9dwUrVGUBQM7r9+4Ndp/ojJ+lEk8OuNh+Kicc0hwHLHz+v81ejN62yQe+c16fvard6MdkrA3xr1WuvNZDvBQhVUkNmEoYYa3C+GpvEmQssvrPhpU0RD6AELzBnrG+VME9Vb2ObvIHKj8OulxD96zk2GTRHM0KaR9XhLPsLQ7U0ML715BDA3k1Zf66DOmZiyzckZZD+YtiV3qnAfwW5hU9Xi+M92vqf5Z5mC7t6aX9Pu5TXb614NE1GKUZ6yDEWFLspo4ihl+X2pA2oMONjbgOG5gqlnBAArsG0WP6dVF+jKQ5 your_email@example.com   The last part where it says your_email@example.com is actually just a comment and can be anything you want here. Typically I put my email address or some word to identify who’s key this is or where it came from in case you have multiple keys.   Generate HTTP password If using SSH key based authentication is not possible for you, or you would rather use a password. You will need to tell Gerrit to generate a random password for you before you can use password authentication.\n Login to Gerrit Click your name at the top right Click Settings \u0026gt; HTTP Password (https://git.eclipse.org/r/#/settings/http-password) Click Generate   Generate HTTP Password   This random password will be the password you use to work with Git via Gerrit URLs. If you are ever worried that your password is compromised simply clear your password and re-generate a new one.\nUnderstanding Eclipse Git and Gerrit URLs At Eclipse there is 3 types of URLs supported git://, ssh://, and https://. You can find the project Git URLs via cGit at https://git.eclipse.org/c/\nFor Git the URLs are:\n git://git.eclipse.org/gitroot/project/repo.git ssh://git.eclipse.org/gitroot/project/repo.git http://git.eclipse.org/gitroot/project/repo.git  You can find the Gerrit URLs via Gerrit at https://git.eclipse.org/r/ and should look something like these:\n git://git.eclipse.org/gitroot/project/repo ssh://git.eclipse.org:29418/project/repo https://git.eclipse.org/r/project/repo  git:// url This URL is a read-only URL via the git:// protocol. This URL is in the form git://git.eclipse.org/gitroot/project/repo.git and is the same no matter if you copied it from cGit or Gerrit.\n project is a directory containing all the repos for a specific project. For example the CBI project is under /gitroot/cbi/repo.git repo.git is the specific git repository for a project, some projects may have more than 1 repo   The final “.git” part of the URL is optional so may be omitted.   ssh:// url The ssh:// protocol URLs are slightly different depending on if you are pulling from Git or Gerrit. If your project is Gerrit enabled you should prefer the Gerrit URL otherwise you won’t be able to push to the repository.\nThe reason the URLs are different is because Gerrit provides it’s own SSH service on port 29418 and does not use the same SSH service that is on the default port on git.eclipse.org.\nGerrit trims the “/gitroot” portion of the URL and adds a port “:29418” in it’s place.\nhttp:// url Again the URLs are slightly different depending on if you are using Git or Gerrit. If your project is Gerrit enabled you should prefer the Gerrit URL otherwise you won’t be able to push to the repository.\nThe reason the URL pattern is different here is because Gerrit hosts it’s own HTTP service for Git. The difference here is Gerrit only supports https (secure) and again Gerrit trims the “/gitroot” part of the URL and replaces it with “/r” which is the Gerrit web URL.\nUpdating a existing Git repo to use Gerrit URL If you have already cloned a Git project at Eclipse you do not need to reclone, simply update your Git URLs to point to the new Gerrit URLs and you can start using Gerrit.\nUsing Git CLI git remote set-url origin \u0026lt;gerrit-url\u0026gt;  Using EGit  Navigate to the Git perspective (Window \u0026gt; Open Perspective \u0026gt; Other \u0026gt; Git) Right click on the repo you wish to modify Click Properties Under Configuration tab, look for remote \u0026gt; origin \u0026gt; url Enter the new URL Click Apply Click Ok   EGit Remote URL   Checkout a Gerrit Project If you have not already checked out the repository you want to work on then you can clone the repo directly.\nUsing Git CLI git clone \u0026lt;gerrit-url\u0026gt;  Using EGit  Navigate to the Git perspective (Window \u0026gt; Open Perspective \u0026gt; Other \u0026gt; Git) Click the Clone Repository button in the Git Repository view Enter the Gerrit URL into the URI link Enter your credentials if applicable (If you are using SSH you’ll have to configure your public/private keys)  Push to Gerrit Pushing to Gerrit is no different than pushing to a regular Git repo. The only difference is you are pointing to a new URL so make sure your URL is configured currently. Simply push as you would with any other repository and your changes will go directly into the repo.\nI like to be as specific as possible so I always push a branch specifically.\nUsing Git CLI git push origin master  Change master to the name of the branch you want to push to.\nUsing EGit  Navigate to the Git perspective (Window \u0026gt; Open Perspective \u0026gt; Other \u0026gt; Git) Right click on the repo you are making changes to Click Push branch\u0026hellip; Ensure branch is master (or whatever branch you’re pushing) Click Next (Note this will immediately push your branch!)   EGit Push   Push to Gerrit for Review Pushing for Review is a feature of Gerrit which allows you to push a patch online for developers to review. This is the method you should use to push if you are not a committer on the project or if you’d like a second opinion on your patch before it goes live.\nGerrit provides a special refspec to push your changes to which will instead of merging into the upstream repository commits it to be reviewed. This refspec is refs/for/* if where the * tells Gerrit which branch you want your patch to be reviewed against. For example if you’d like to push your patch to be reviewed against the master branch then you push to refs/for/master. Change master to be any other existing branch online for it to be reviewed against another branch.\nIn the example below we are pushing a special Git keyword called HEAD. In this case this simply means the latest commit on the current branch you are on.\nUsing Git CLI git push origin HEAD:refs/for/master  Change master to whichever branch you want to push to.\nUsing EGit  Navigate to the Git perspective (Window \u0026gt; Open Perspective \u0026gt; Other \u0026gt; Git) Right click on the repo you are making changes to Click Remote \u0026gt; Push\u0026hellip; Select Configure Remote Repository and choose origin Click Next Set Source ref to HEAD Set Destination ref to refs/for/master (Change master to the branch you want the patch to be reviewed against) Click Add Spec Click Finish   EGit Refspec    After you push, Gerrit will provide you with a link to your review. Note this down as it will be the link to your patch should you need it. If you are working on a Bug it is good practice to link to this URL in the Bug. The URL should look similar to this https://git.eclipse.org/r/24873/   Updating a patch for Review When your code is reviewed you might have some feedback asking you to address some issues with your code. In this case you will need to update your patch with a new version that addresses feedback comments.\nThe Gerrit way to update patches is to amend your existing patch commit continuously until it is accepted. When you amend your patch though you need to ensure that your commit message contains the correct Change-Id field. This field is how Gerrit knows that you are updating an existing Gerrit review. This is a unique string that helps Gerrit identify an existing Review and update it. You can find the Change-Id on the review page for your patch near the top you should see a box similar to this:\n Gerrit Change-Id   Using Git CLI git add \u0026lt;files\u0026gt; git commit --amend  Using EGit  Navigate to the Git perspective (Window \u0026gt; Open Perspective \u0026gt; Other \u0026gt; Git) Right click on the repo you are making changes to Click Commit… Select the files you modified Check the Amend Previous Commit button   EGit Amend   Amended Commit message Your amended commit message should look similar to the following:\nBug 420891 - [CBI] Builds too many projects According discussions in Bug 420891 it seems CBI build is building too many projects in JSDT. This patch removes the development directory from the build list which does not need to be built. Change-Id: I5bc9dfe47569e854b40d4fe9a400bb1dd16781d6 Signed-off-by: Thanh Ha \u0026lt;thanh.ha@eclipse.org\u0026gt;  Once amended you can push using the same method as in the previous section Push to Gerrit for Review.\n","date":1440403437,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590882101,"objectID":"358efa52415d64569751703817424852","permalink":"https://www.zxiiro.ca/post/contribute-to-eclipse-via-gerrit/","publishdate":"2015-08-24T04:03:57-04:00","relpermalink":"/post/contribute-to-eclipse-via-gerrit/","section":"post","summary":"Gerrit is a Web based code review system that is available to projects at Eclipse. The service is located at https://git.eclipse.org/r/\nCreating and configuring your Gerrit account Eclipse\u0026rsquo;s Gerrit instance does not know your account exists until you login for the first time.","tags":["Eclipse","Gerrit","Git"],"title":"Contributing to Eclipse Projects via Gerrit","type":"post"},{"authors":[null],"categories":[],"content":"https://www.eclipse.org/community/eclipse_newsletter/2014/july/article3.php\n","date":1404187200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589733572,"objectID":"21f119410ed66f4b2b09a6cc80e5f48d","permalink":"https://www.zxiiro.ca/publication/contribute-to-eclipse-projects-via-gerrit/","publishdate":"2014-07-01T00:00:00-04:00","relpermalink":"/publication/contribute-to-eclipse-projects-via-gerrit/","section":"publication","summary":"https://www.eclipse.org/community/eclipse_newsletter/2014/july/article3.php","tags":["Eclipse"],"title":"Contribute to Eclipse Projects via Gerrit","type":"publication"},{"authors":[null],"categories":[],"content":"https://www.zxiiro.ca/presentations/fork-eclipse/\n","date":1400342230,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589767231,"objectID":"fdd0d0b3833d1aad1e9b6a1928819863","permalink":"https://www.zxiiro.ca/talk/fork-the-ide/","publishdate":"2014-05-17T11:57:10-04:00","relpermalink":"/talk/fork-the-ide/","section":"talk","summary":"https://www.zxiiro.ca/presentations/fork-eclipse/","tags":["Eclipse"],"title":"Fork the Ide","type":"talk"},{"authors":[null],"categories":[],"content":"https://www.zxiiro.ca/presentations/rebase\n","date":1400339049,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589731295,"objectID":"360ab855d19b8e86ae43353b92ccbf18","permalink":"https://www.zxiiro.ca/talk/wtf-is-git-rebase/","publishdate":"2014-05-17T11:04:09-04:00","relpermalink":"/talk/wtf-is-git-rebase/","section":"talk","summary":"https://www.zxiiro.ca/presentations/rebase","tags":["Git"],"title":"WTF is Git Rebase","type":"talk"},{"authors":[null],"categories":[],"content":" iperf is a handy tool to check network performance between 2 computers. You can install this tool using your distro’s package manager.\nThere are 2 modes this tool runs in. Server and Client, you will need to run it in server mode on one end and client mode on the other end.\nServer usage:\niperf -s  Client usage:\niperf -c \u0026lt;host/ip\u0026gt;  Basically you want to run it with the -s option on the server side and the -c option on the client side. On the client end you will also need to provider the server\u0026rsquo;s hostname or IP address.\nHere\u0026rsquo;s an example of what it looks like when run.\n------------------------------------------------------------ Client connecting to 192.168.32.50, TCP port 5001 TCP window size: 22.9 KByte (default) ------------------------------------------------------------ [ 3] local 192.168.32.152 port 40885 connected with 192.168.32.50 port 5001 [ ID] Interval Transfer Bandwidth [ 3] 0.0-10.0 sec 897 MBytes 752 Mbits/sec  ","date":1383019200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589763249,"objectID":"84fde65f0bce09f6a8fb80150c3ff964","permalink":"https://www.zxiiro.ca/post/test-network-with-iperf/","publishdate":"2013-10-29T00:00:00-04:00","relpermalink":"/post/test-network-with-iperf/","section":"post","summary":"iperf is a handy tool to check network performance between 2 computers. You can install this tool using your distro’s package manager.\nThere are 2 modes this tool runs in.","tags":["Linux"],"title":"Testing network performance with iperf","type":"post"},{"authors":[null],"categories":[],"content":"If you use Steam on Linux one of the annoying things I’ve found is that unlike on Windows, Steam for Linux installs to your $HOME directory. This means every user will have their own Steam installed and what’s more their own games installed. So on a shared system you might end up with the same games being installed multiple times.\nSteam has a feature that allows you to install games to a alternate location called Steam Libraries. This feature allows you to create a Library at a new location such as an alternate harddrive or partition if you don’t like where Steam installs games by default. We can use this to create a shared library location of games. To do this create a new user group on my system called steam then add all the users on the system which use Steam to this group.\nThen create a shared directory on my system called /steam-library, then set the permissions to allow reading, writing and executing files from this directory to anyone in the steam group.\nNext launch Steam and add /steam-library as a new Library in Steam and installed games to this location. After installing the games you can tell all other users who use Steam on this computer to do the same. If a game they want to install is already in the Library, it’ll just appear in their account, no unnecessary downloading.\nQuick Steps mkdir /steam-library groupadd steam chgrp steam /steam-library chmod 770 /steam-library useradd -G steam your_user # add /steam-library to steam on all pc's and user accounts  ","date":1382860800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589763249,"objectID":"dff000b5be9674a66ed4e71082051f86","permalink":"https://www.zxiiro.ca/post/steam-share-library-with-linux/","publishdate":"2013-10-27T04:00:00-04:00","relpermalink":"/post/steam-share-library-with-linux/","section":"post","summary":"If you use Steam on Linux one of the annoying things I’ve found is that unlike on Windows, Steam for Linux installs to your $HOME directory. This means every user will have their own Steam installed and what’s more their own games installed.","tags":["Steam","Linux"],"title":"Steam Share Library With Linux","type":"post"},{"authors":[null],"categories":[],"content":"https://www.eclipse.org/community/eclipse_newsletter/2013/august/article3.php\n","date":1375329600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589733572,"objectID":"6616dd5ca879c83dd87c699c45726362","permalink":"https://www.zxiiro.ca/publication/eclipse-cbi/","publishdate":"2013-08-01T00:00:00-04:00","relpermalink":"/publication/eclipse-cbi/","section":"publication","summary":"https://www.eclipse.org/community/eclipse_newsletter/2013/august/article3.php","tags":["Eclipse"],"title":"Eclipse CBI","type":"publication"}]