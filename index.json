[{"authors":["zxiiro"],"categories":null,"content":"Thanh Ha is a DevOps Engineer at the Lumina Networks. Since 2014 he has participated in the OpenDaylight project providing release engineering expertise to the project. His area of focus is in build automation and tooling to support OpenDaylight’s Continuous Integration (CI) platform.\nHe received his Bachelor of Information Technology - Network Technology degree from Carleton University \u0026amp; Algonquin College in 2009 with distinction.\nOutside of work he enjoys hiking in Gatineau park and rollerblading around the city.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1589758033,"objectID":"9f10e3c663adabd1bb241af9899070ea","permalink":"https://www.zxiiro.ca/author/thanh-ha/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/thanh-ha/","section":"authors","summary":"Thanh Ha is a DevOps Engineer at the Lumina Networks. Since 2014 he has participated in the OpenDaylight project providing release engineering expertise to the project. His area of focus is in build automation and tooling to support OpenDaylight’s Continuous Integration (CI) platform.","tags":null,"title":"Thanh Ha","type":"authors"},{"authors":["Thanh Ha"],"categories":[],"content":"An often overlooked part of Git is the commit message. The usefulness of many of Git\u0026rsquo;s features rely on well structured commit messages.\nA commit message structure:\nSubject line in 50 chars or less Following a blank line after the subject line is the commit message body, containing a more detailed explaination of the change. This should be word-wrapped at 72 characters. The body can consist of as many lines as necessary to fully explain in detail why the change is necessary. You should explain the problem that this commit is solving and focus on why this change is necessary rather than explaining the \u0026quot;how\u0026quot; (the reviewer can review the code for that detail). Include any side effects and consequences of the change. Many CLI based tools such as `git log`, `git shortlog`, `git rebase`, are significantly more useful when the commit messages follow these best practices. Finally the last \u0026quot;block\u0026quot; (a section without further blank lines following it) is for metadata such as sign-offs, references, and issue numbers. Issue: #123 See-also: #456 Ref: https://example.com/relevant-article-or-link Co-authored-by: Firstname Lastname \u0026lt;email\u0026gt; Signed-off-by: Firstname Lastname \u0026lt;email\u0026gt;  We will break down the major sections below.\n \n (adsbygoogle = window.adsbygoogle || []).push({});  The subject line The subject line should be short and sweet, providing enough detail for the reader to immediately have a decent idea about what the commit is about.\nFrom the git commit manpage:\nThough not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, Git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.  Best practices:\n Keep the subject line short (50 characters) The first letter of the subject line should be capitalized The subject line should not end with any punctuation The subject line should be written in imperative mood Immediately following subject line is a blank line Descriptive enough that one can get the gist of the change  Good examples:\n Allow pyyaml = 5 Bump version to 2.0.0-SNAPSHOT Fix double inderection of name templates Add Private and WIP change support for Gerrit   Bad examples:\n Fix build issue Fixes delete-all command when no option is provided. Adding view for the Delivery Pipeline Plugin test non-default value of attach-build-log   The commit body Following a blank line after the subject line, the commit body is where you can explain your change in full details.\nBest practices:\n Keep lines under 72 characters Explain what and why instead of how  Git as well many tools that parse Git commits do not automatically wrap text so you must manually do this yourself. Keeping the limit to 72 characters is good practice to allow for Git to do indentation and still be under 80 characters total.\nPut yourself in the shoes of the reviewer of the change. If someone proposed this change to you, what information would you like to know about it before you will approve the change?\nReviewers can look at the diff to see what exactly was changed so focus on telling the reviewer why they should accept your change. You are essentially writing a project proposal here so provide as much detail as possible.\nIf you are fixing code or a test, include details on how to reproduce the problem so that the reviewer doesn\u0026rsquo;t have to reach out to you for further details on how to retest.\nGood example A:\nFix the yaml load warning In the new version of PyYAML the API changed to be more explicit. Now the default value for the Loader is None, see: https://github.com/yaml/pyyaml/blob/5.1/lib3/yaml/__init__.py#L103 The load is unsafe. It's better to use safe_load function. Change-Id: Ia1cd16f2ff970ca220a266c99b6554dd4254ebd9  Good example B:\nAdd 'secret-token' parameter to gitlab trigger This adds support for the job specific secret token in the gitlab build trigger. This feature was added to the \u0026quot;Gitlab Plugin\u0026quot; with version 1.4.1 (released Sep 24, 2016). Excerpt from the changelog: \u0026quot;Add possiblity to configure secret tokens per job to allow only web hooks with the correct token to trigger builds.\u0026quot; Change-Id: Id1ede4a6a51a231f60a39bfaefbadd8f849076e4  Commit message trailer The final block of a commit message is for trailers. Similar to email it is where you sign off on your message as well as include other useful metadata. Typically for references to issues or links to pages for additional information.\nBest Practices:\n Use the form Key: Value when entering trailers Make sure the last block has no blank lines in between entries If there is a relevant issue, refer to it here Give credit via Co-authored-by to other folks who worked on this commit  Example:\nIssue: ABC-123 Ref: https://example.com/blog-about-issue Change-Id: Iaa40ef0377409e08e6efd41aa967249f9d3c4xyz Co-authored-by: Bob \u0026lt;bob@example.com\u0026gt; Signed-off-by: Tim \u0026lt;tim@example.com\u0026gt;  Signed-off-by\nIn some open source projects folks leave a Signed-off-by: Firstname Lastname \u0026lt;someone@example.com\u0026gt;.\nThis can be added automatically via the git commit -s command, it\u0026rsquo;s a convenience parameter but you can also type it in by hand when writing your commit message.\nSigned-off-by doesn\u0026rsquo;t really mean much in most projects but some open source projects use it as a way of indicating that you have signed off on an official document such as a Contributor License Agreement (CLA) or a Developer Certificate of Origin.\nReference: https://developercertificate.org/\nDeveloper Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 1 Letterman Drive Suite D4700 San Francisco, CA, 94129 Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.  Be mindful about the sign-off rules on the projects you are contributing to and make sure you understand what the sign-off means in case the project you are contributing to has a document similar to this.\nRefer to the manpage for git-interpret-trailers for more details on trailers.\nFinal tips on commit messages   Resist the urge to use git commit -m 'My commit message'\nWhile it may seem handy, it promotes a bad habit of writing unthoughtful commit messages. By editing your commit message in a full editor you will spend more time thinking about your commit message, often producing higher quality messages.\n  Spend time reviewing code yourself\nIf you are actively participating in a project, spend some time reviewing code on that project even if you are not a maintainer or committer on the project. This is the best way for you to quickly learn the best practices of not only the project but also what we discussed here as it is easier to understand the hardships of a code reviewer if you are one yourself.\n  ","date":1589560056,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589733235,"objectID":"1bd739218f42c7686cb8949a9409872f","permalink":"https://www.zxiiro.ca/post/writing-a-great-commit-message/","publishdate":"2020-05-15T12:27:36-04:00","relpermalink":"/post/writing-a-great-commit-message/","section":"post","summary":"An often overlooked part of Git is the commit message. The usefulness of many of Git\u0026rsquo;s features rely on well structured commit messages.\nA commit message structure:\nSubject line in 50 chars or less Following a blank line after the subject line is the commit message body, containing a more detailed explaination of the change.","tags":["Git"],"title":"Writing a Great Commit Message","type":"post"},{"authors":["Thanh Ha"],"categories":[],"content":"https://www.eclipse.org/community/eclipse_newsletter/2014/july/article3.php\n","date":1404187200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589733572,"objectID":"21f119410ed66f4b2b09a6cc80e5f48d","permalink":"https://www.zxiiro.ca/publication/contribute-to-eclipse-projects-via-gerrit/","publishdate":"2014-07-01T00:00:00-04:00","relpermalink":"/publication/contribute-to-eclipse-projects-via-gerrit/","section":"publication","summary":"https://www.eclipse.org/community/eclipse_newsletter/2014/july/article3.php","tags":["Eclipse"],"title":"Contribute to Eclipse Projects via Gerrit","type":"publication"},{"authors":["Thanh Ha"],"categories":[],"content":"http://www.zxiiro.ca/presentations/fork-eclipse/\n","date":1400342230,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589731295,"objectID":"fdd0d0b3833d1aad1e9b6a1928819863","permalink":"https://www.zxiiro.ca/talk/fork-the-ide/","publishdate":"2014-05-17T11:57:10-04:00","relpermalink":"/talk/fork-the-ide/","section":"talk","summary":"http://www.zxiiro.ca/presentations/fork-eclipse/","tags":["Eclipse"],"title":"Fork the Ide","type":"talk"},{"authors":["Thanh Ha"],"categories":[],"content":"https://www.zxiiro.ca/presentations/rebase\n","date":1400339049,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589731295,"objectID":"360ab855d19b8e86ae43353b92ccbf18","permalink":"https://www.zxiiro.ca/talk/wtf-is-git-rebase/","publishdate":"2014-05-17T11:04:09-04:00","relpermalink":"/talk/wtf-is-git-rebase/","section":"talk","summary":"https://www.zxiiro.ca/presentations/rebase","tags":["Git"],"title":"WTF is Git Rebase","type":"talk"},{"authors":["Thanh Ha"],"categories":[],"content":" iperf is a handy tool to check network performance between 2 computers. You can install this tool using your distro’s package manager.\nThere are 2 modes this tool runs in. Server and Client, you will need to run it in server mode on one end and client mode on the other end.\n \n (adsbygoogle = window.adsbygoogle || []).push({});  Server usage:\niperf -s  Client usage:\niperf -c \u0026lt;host/ip\u0026gt;  Basically you want to run it with the -s option on the server side and the -c option on the client side. On the client end you will also need to provider the server\u0026rsquo;s hostname or IP address.\nHere\u0026rsquo;s an example of what it looks like when run.\n------------------------------------------------------------ Client connecting to 192.168.32.50, TCP port 5001 TCP window size: 22.9 KByte (default) ------------------------------------------------------------ [ 3] local 192.168.32.152 port 40885 connected with 192.168.32.50 port 5001 [ ID] Interval Transfer Bandwidth [ 3] 0.0-10.0 sec 897 MBytes 752 Mbits/sec  ","date":1383019200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589732805,"objectID":"84fde65f0bce09f6a8fb80150c3ff964","permalink":"https://www.zxiiro.ca/post/test-network-with-iperf/","publishdate":"2013-10-29T00:00:00-04:00","relpermalink":"/post/test-network-with-iperf/","section":"post","summary":"iperf is a handy tool to check network performance between 2 computers. You can install this tool using your distro’s package manager.\nThere are 2 modes this tool runs in.","tags":["Linux"],"title":"Testing network performance with iperf","type":"post"},{"authors":["Thanh Ha"],"categories":[],"content":"If you use Steam on Linux one of the annoying things I’ve found is that unlike on Windows, Steam for Linux installs to your $HOME directory. This means every user will have their own Steam installed and what’s more their own games installed. So on a shared system you might end up with the same games being installed multiple times.\n \n (adsbygoogle = window.adsbygoogle || []).push({});  Steam has a feature that allows you to install games to a alternate location called Steam Libraries. This feature allows you to create a Library at a new location such as an alternate harddrive or partition if you don’t like where Steam installs games by default. We can use this to create a shared library location of games. To do this create a new user group on my system called steam then add all the users on the system which use Steam to this group.\nThen create a shared directory on my system called /steam-library, then set the permissions to allow reading, writing and executing files from this directory to anyone in the steam group.\nNext launch Steam and add /steam-library as a new Library in Steam and installed games to this location. After installing the games you can tell all other users who use Steam on this computer to do the same. If a game they want to install is already in the Library, it’ll just appear in their account, no unnecessary downloading.\nQuick Steps mkdir /steam-library groupadd steam chgrp steam /steam-library chmod 770 /steam-library useradd -G steam your_user # add /steam-library to steam on all pc's and user accounts  ","date":1382860800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589732425,"objectID":"dff000b5be9674a66ed4e71082051f86","permalink":"https://www.zxiiro.ca/post/steam-share-library-with-linux/","publishdate":"2013-10-27T04:00:00-04:00","relpermalink":"/post/steam-share-library-with-linux/","section":"post","summary":"If you use Steam on Linux one of the annoying things I’ve found is that unlike on Windows, Steam for Linux installs to your $HOME directory. This means every user will have their own Steam installed and what’s more their own games installed.","tags":["Steam","Linux"],"title":"Steam Share Library With Linux","type":"post"},{"authors":["Thanh Ha"],"categories":[],"content":"https://www.eclipse.org/community/eclipse_newsletter/2013/august/article3.php\n","date":1375329600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589733572,"objectID":"6616dd5ca879c83dd87c699c45726362","permalink":"https://www.zxiiro.ca/publication/eclipse-cbi/","publishdate":"2013-08-01T00:00:00-04:00","relpermalink":"/publication/eclipse-cbi/","section":"publication","summary":"https://www.eclipse.org/community/eclipse_newsletter/2013/august/article3.php","tags":["Eclipse"],"title":"Eclipse CBI","type":"publication"}]